/*
  tags: advanced

  <p>This example demonstrates rendering screen space projected lines
  from a technique described <a href="https://mattdesl.svbtle.com/drawing-lines-is-hard">here</a>.</p>

  <p>This technique requires each vertex to reference the previous and next vertex in the line;
  this example utilizes attribute byte offsets to share a single position buffer for all three
  of these attributes.</p>
*/
const { push, unshift } = Array.prototype;

function lineMesh(num) {
	let buffer = [];
	for (let i = 0; i < (num - 1) * 2; i += 2) {
		buffer.push(i, i + 1, i + 2, i + 2, i + 1, i + 3);
	}
	return buffer;
}

const buffer = {
	duplicate(buffer, stride, dupScale) {
		if (stride == null) stride = 1;
		if (dupScale == null) dupScale = 1;
		const out = [];
		const component = new Array(stride * 2);
		for (let i = 0, il = buffer.length / stride; i < il; i++) {
			const index = i * stride;
			for (let j = 0; j < stride; j++) {
				const value = buffer[index + j];
				component[j] = value;
				component[j + stride] = value * dupScale;
			}
			push.apply(out, component);
		}
		return out;
	},

	pushElement(buffer, elementIndex, stride) {
		const component = new Array(stride);
		const ai = elementIndex * stride;
		for (let i = 0; i < stride; i++) {
			component[i] = buffer[ai + i];
		}
		push.apply(buffer, component);
		return buffer;
	},

	unshiftElement(buffer, elementIndex, stride) {
		const component = new Array(stride);
		const ai = elementIndex * stride;
		for (let i = 0; i < stride; i++) {
			component[i] = buffer[ai + i];
		}
		unshift.apply(buffer, component);
		return buffer;
	},
};

const FLOAT_BYTES = Float32Array.BYTES_PER_ELEMENT;

// make canvas
const canvas = document.createElement("canvas");
canvas.width = 800;
canvas.height = 600;
document.body.appendChild(canvas);

const regl = wrapREGL({
	canvas: canvas,
	pixelRatio: 1,
	attributes: { antialias: false, preserveDrawingBuffer: true },
});

// compute line values
const positions = [
	21.665428893905194, 48.004983837497264, 23.47629796839729, 46.19547358096942, 26.185101580135438,
	43.48870819617765, 28.89390519187359, 40.781942811385875, 31.60270880361174, 38.97743255485803,
	35.214446952595935, 38.07517742659411, 38.82618510158014, 37.172922298330185, 42.43792325056434,
	37.172922298330185, 46.04966139954853, 37.172922298330185, 46.95259593679458, 38.97743255485803,
	46.95259593679458, 48.902238965761185, 46.04966139954853, 62.436065889720034, 44.24379232505643,
	72.36087230062319, 42.43792325056434, 80.48116845499851, 41.534988713318285, 85.89469922458204,
	41.534988713318285, 91.30822999416557, 42.43792325056434, 95.8195056354852, 46.04966139954853,
	98.52627102027697, 51.46726862302483, 100.3307812768048, 57.78781038374718, 100.3307812768048,
	68.62302483069978, 95.81950563548519, 81.26410835214446, 87.69920948110988, 90.29345372460497,
	80.48116845499851, 98.41986455981942, 74.16538255715105, 106.54627539503386, 68.75185178756749,
	114.6726862302483, 63.33832101798396, 121.8961625282167, 58.827045376664344, 128.21670428893907,
	57.022535120136496, 134.5372460496614, 57.022535120136496, 138.14898419864562, 57.022535120136496,
	139.9548532731377, 57.022535120136496, 143.5665914221219, 67.84959665930357, 146.27539503386004,
	87.69920948110988, 146.27539503386004, 105.74431204638836, 142.66365688487585, 125.59392486819466,
	130.92550790067722, 149.9548133313206, 115.57562076749436, 177.9247223075022, 104.74040632054175,
	206.79688641194775, 97.51693002257336, 230.25551974680974, 93.90519187358916, 246.4961120555604,
	93.90519187358916, 257.32317359472745, 93.90519187358916, 263.63895949257494, 95.71106094808127,
	269.05249026215847, 99.32279909706546, 273.56376590347804, 104.74040632054175, 275.3682761600059,
	113.76975169300226, 275.3682761600059, 132.7313769751693, 269.9547453904224, 161.62528216704288,
	254.61640820993568, 192.32505643340858, 233.86454025986546, 220.31602708803612,
	211.30816205326738, 242.88939051918737, 184.24050820534967, 260.0451467268623, 156.27059922916806,
	273.58916478555307, 135.51873127909784, 283.52144469525956, 121.08264922687505,
	293.45372460496617, 108.45107743118012, 304.28893905191876, 99.4285261485409, 314.22121896162525,
	96.72176076374912, 321.4446952595937, 95.8195056354852, 324.15349887133186, 94.91725050722127,
	327.765237020316, 94.91725050722127, 331.37697516930024, 96.72176076374912, 334.98871331828445,
	103.9398017898605, 337.6975169300226, 119.27813897034719, 337.6975169300226, 142.73677230520917,
	330.4740406320542, 176.12021205097435, 317.83295711060947, 214.91718256632305, 297.0654627539503,
	269.95474539042243, 269.97742663656885, 323.1877979579939, 247.40406320541763, 358.37574796028684,
	232.05417607223478, 384.54114667994065, 224.83069977426638, 400.78173898869125,
	222.12189616252823, 413.4133107843861, 222.12189616252823, 421.53360693876147, 222.12189616252823,
	427.84939283660896, 222.12189616252823, 432.3606684779286, 223.02483069977427, 435.96968899098425,
	225.73363431151242, 438.676454375776, 228.44243792325057, 440.4809646323039, 232.95711060948082,
	441.3832197605678, 238.37471783295712, 441.3832197605678, 245.5981941309255, 439.5787095040399,
	258.2392776523702, 432.3606684779286, 275.39503386004515, 416.12007616917793, 297.9683972911964,
	395.3682082191077, 324.15349887133186, 373.71408514077353, 354.85327313769756, 352.05996206243935,
	384.65011286681715, 331.3080941123692, 407.2234762979684, 314.16524667535464, 426.18510158013544,
	297.924654366604, 438.8261851015801, 282.5863171861173, 449.6613995485327, 262.736704364311,
	463.20541760722347, 238.37581590118506, 475.84650112866814, 220.33071333590658, 487.5846501128668,
	204.9923761554199, 499.32279909706546, 189.6540389749332, 516.4785553047404, 170.70668128139084,
	537.2460496613996, 151.75932358784843, 553.4988713318285, 142.7367723052092, 561.6252821670429,
	141.83451717694527, 566.1399548532731, 140.93226204868137, 569.7516930022573, 140.03000692041743,
	572.4604966139955, 140.03000692041743, 576.0722347629796, 143.63902743347313, 579.6839729119639,
	150.85706845958453, 581.489841986456, 158.97736461395982, 581.489841986456, 171.60893640965475,
	581.489841986456, 186.94727359014144, 578.7810383747178, 203.18786589889206, 569.7516930022573,
	221.2329684641705, 558.9164785553047, 242.88709154250466, 546.27539503386, 270.8570005186863,
	530.9255079006772, 298.8269094948679, 515.5756207674943, 330.40583898410523, 502.03160270880363,
	364.69153385813433, 490.293453724605, 397.1727184756356, 480.3611738148984, 421.5336069387615,
	474.94356659142215, 439.5787095040399, 471.3318284424379, 455.81930181279057, 469.5259593679458,
	463.03734283890196, 469.5259593679458, 469.3531287367494, 469.5259593679458, 479.27793514765256,
	469.5259593679458, 487.3982313020279, 469.5259593679458, 491.0072518150836, 471.3318284424379,
	493.71401719987534, 474.04063205417606, 495.5185274564032, 476.74943566591423, 495.5185274564032,
	487.5846501128668, 493.71401719987534, 506.5462753950339, 486.4959761737639, 526.4108352144469,
	472.0598941215411, 546.2753950338601, 456.7215569410545, 567.9458239277653, 437.7741992475121,
	590.5191873589165, 417.9245864257058, 605.8690744920993, 399.8794838604273, 614.8984198645599,
	382.73663642341273, 623.0248306997743, 370.10506462771787, 630.2483069977427, 357.47349283202294,
	637.471783295711, 347.5486864211198, 644.6952595936795, 338.5261351384805, 652.8216704288939,
	328.6013287275774, 659.1422121896162, 322.28554282972993, 662.7539503386005, 318.6765223166742,
	666.3656884875846, 316.8720120601464, 669.9774266365689, 316.8720120601464, 673.5891647855531,
	316.8720120601464, 677.2009029345372, 316.8720120601464, 679.9097065462754, 316.8720120601464,
	682.6185101580136, 317.77426718841036, 684.4243792325057, 322.28554282972993, 686.2302483069977,
	330.40583898410523, 688.9390519187359, 338.5261351384805, 689.8419864559819, 345.7441761645919,
	689.8419864559819, 358.37574796028684, 689.8419864559819, 372.81183001250963, 689.8419864559819,
	381.8343812951489, 688.9390519187359, 391.759187706052, 685.3273137697518, 403.488504373483,
	680.8126410835214, 411.6088005278583, 676.2979683972912, 420.63135181049756, 669.0744920993228,
	432.3606684779286, 661.8510158013544, 444.0899851453596, 657.3363431151241, 455.81930181279057,
	654.6275395033861, 464.84185309542977, 653.72460496614, 469.3531287367494, 654.6275395033861,
	474.7666595063329, 657.3363431151241, 481.9847005324443, 660.0451467268623, 485.59372104550005,
	661.8510158013544, 487.39823130202785, 665.4627539503385, 488.3004864302918, 669.0744920993227,
	488.3004864302918, 670.8803611738149, 488.3004864302918, 672.6862302483071, 488.3004864302918,
	674.492099322799, 488.3004864302918, 679.9097065462754, 488.3004864302918, 688.9390519187359,
	484.6914659172361, 696.1625282167042, 480.1801902759164, 700.6772009029346, 477.4734248911247,
	703.3860045146728, 474.7666595063329, 706.0948081264108, 472.05989412154116, 708.8036117381489,
	470.25538386501336, 710.6094808126411, 469.3531287367494, 714.2212189616253, 467.54861848022153,
	717.8329571106094, 466.6463633519577, 719.6388261851016, 466.6463633519577, 721.4446952595937,
	466.6463633519577, 723.2505643340858, 467.54861848022153, 725.056433408578, 470.2553838650133,
	726.8623024830699, 473.864404378069, 729.5711060948081, 480.1801902759165, 732.2799097065463,
	487.3982313020279, 734.0857787810385, 492.81176207161144, 734.9887133182845, 498.22529284119497,
	734.9887133182845, 503.6388236107785, 734.9887133182845, 510.8568646368899, 734.9887133182845,
	518.9771607912651, 734.9887133182845, 526.1952018173765, 733.1828442437923, 534.3154979717519,
	728.6681715575621, 546.044814639183, 725.9593679458239, 556.87187617835, 725.9593679458239,
	563.1876620761974, 725.9593679458239, 569.5034479740449, 725.9593679458239, 574.9169787436284,
	725.9593679458239, 578.5259992566841, 725.9593679458239, 582.1350197697398, 728.6681715575621,
	585.7440402827955, 734.0857787810384, 590.2553159241152, 739.5033860045146, 595.6688466936987,
	745.8239277652369, 600.1801223350183, 751.2415349887133, 602.88688771981, 755.7562076749435,
	603.789142848074, 759.3679458239278, 603.789142848074, 762.076749435666, 601.0823774632822,
	764.7855530474042, 597.4733569502265, 766.5914221218961, 594.7665915654347, 769.3002257336343,
	590.2553159241152, 772.0090293453725, 585.7440402827955, 773.8148984198646, 582.1350197697398,
	774.7178329571107, 577.6237441284202, 774.7178329571107, 574.0147236153646, 774.7178329571107,
	572.2102133588367, 775.6207674943566, 571.3079582305727, 777.4266365688488, 569.5034479740449,
	778.3345711060948, 567.6939377175171,
];
const POINTS = positions.length / 2;
buffer.pushElement(positions, POINTS - 1, 2);
buffer.unshiftElement(positions, 0, 2);
const positionsDup = new Float32Array(buffer.duplicate(positions, 2));
const positionBuffer = regl.buffer({
	usage: "static",
	type: "float",
	length: (POINTS + 2) * 4 * FLOAT_BYTES,
	data: positionsDup,
});

const offset = new Array(POINTS * 2).fill().map((v, i) => 1 - (i % 2) * 2); // alternating [1, -1, 1, -1, etc]
const offsetBuffer = regl.buffer({
	usage: "static",
	type: "float",
	length: (POINTS + 2) * 2 * FLOAT_BYTES,
	data: offset,
});

const indices = lineMesh(POINTS);

// regl args
const attributes = {
	prevPos: {
		buffer: positionBuffer,
		offset: 0,
		stride: FLOAT_BYTES * 2,
	},
	currPos: {
		buffer: positionBuffer,
		offset: FLOAT_BYTES * 2 * 2,
		stride: FLOAT_BYTES * 2,
	},
	nextPos: {
		buffer: positionBuffer,
		offset: FLOAT_BYTES * 2 * 4,
		stride: FLOAT_BYTES * 2,
	},
	offset: offsetBuffer,
};

const uniforms = {
	aspect: ({ viewportWidth, viewportHeight }) => viewportWidth / viewportHeight,
	color: [0.5, 0, 0.5, 1],
	thickness: 2,
};

const elements = regl.elements({
	primitive: "triangles",
	usage: "static",
	type: "uint16",
	data: indices,
});

const vert = `
uniform float aspect;
uniform float thickness;
attribute vec2 prevPos;
attribute vec2 currPos;
attribute vec2 nextPos;
attribute float offset;
void main() {
  vec2 dir = normalize(nextPos - prevPos);
  vec2 normal = vec2(-dir.y, dir.x) * thickness;
  normal.x /= aspect;
  vec2 line = currPos + (normal * offset);
  line = line / vec2(400., -300.) + vec2(-1., 1.);
  gl_Position = vec4(line, 0., 1.);
}`;

const frag = `
precision mediump float;
uniform vec4 color;
void main() {
  gl_FragColor = color;
}`;

// render single frame
window.requestAnimationFrame(regl({ attributes, uniforms, elements, vert, frag }));
